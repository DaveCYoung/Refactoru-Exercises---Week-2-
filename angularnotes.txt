What is Angular?

A strongly opinionated, MVC, framework

Set of code that someone else wrote (in javascript)

More than library, has broader functionality.

Framework: code that someone else has written that you can use in your project.  it's bigger than a library.  It's intended to be an all in one solution.  One stop shop for front end needs. 

MVC  - Model View Controller: Pattern for designing graphical applications of all types (not just web dev).  

Three parts: 

	Model - Raw data. Javascript objects, server data, API, etc.  Can come from several sources.  Also includes state of application.  Editing, not editing, active, inactive, etc.    
	
	View - Visual representation of your model.  
	
	Controller - What connects model (data) to view (visual representation) Can be impacted by user.  Glue that connects view/model.  

Imperative Programming: Program performs list of actions or series of actions.  Angular makes imperative programming very difficult.  

Declarative Programming: Not a series of actions.  Declare relationships between different pieces of code.  Declare between model, view.  

Dependencies - code the app or bit of code is dependent on.  variables from other pieces of JS that you need in your code.  prevents accidental variable spillover.  

directive === ng-XXXX 
ng-click defines what to do when element is clicked on.

ng-class - specifies class based on specified variable string
		 - may also use with boolean value.  if that value is true, class is applied to that element. for ng-class as boolean:  ng-class="{big : important}"  how this reads - if IMPORTANT is TRUE, appy BIG.   

random - input type in html = range 

ng-show: dynamically hide or reveal element based on boolean

< img ng-src = "{{sourcevariable}}">

event handling 
event.prevent default()

ng-keypress= namedfunction()
ng-submit - automatically prevents default behaviors 

keydown - moment any key goes down
keyup - moment any key comes up
keypress - triggers any time a typing event would produce a charcter

______________________________________________________________________________________________________


delcaring module [ ] 

angular.module(app, []);

setting module, dependencies go into 'injector'

angular.module('app').control('trollerController', [$scope, function($scope){
	$scope.greeting = 'hello world'

}


FILTER - ex uppercase, changes string to upper case.  
	syntax - {{greeting | uppercase}}  or {{currency | currency : symbol(actual currency symbol used : fractionSize (number of decimal places to round to) }}  ':' = ARGUMENT 

	must inject filters to use within JS.	

	Can make own filters...




currency - changes to $$ value.  

creating filter syntax :

angular.module('appName').filter('excite', function(){
	
	return function (expression, depression){  //FUNCTION MUST RETURN FUNCTION (which runs when filter is called) TO REGISTER FILTER

	if (!depression) {
		return expression.toUpperCase() + '!!!'
	}	
	else{
		return expression.toLowerCase() + '... i guess';
	}

	} 

})

// to apply filter {{ expression | excite : boolean}}


____________________________________________________________________________________________________________



angular.module('app').controller('trollerController', ['$scope, $filter', function($scope, $filter){
	
	console.log($filter('excite'))  // returned function excite 

	var exciter = $filter('excite'); // grabs excite filter function (defined above) and stores as 'exciter'

	$scope.greeting = 'party';
	$scope.amIDepressedd = true;

	$scope.awesomeGreeting = exciter($scope.greeting);

}
])


accessing variables from different controlers - proper syntax for declaring dependencies 

factories - thinkgs/functions that can be ingested in multiple controllers

	andular.module('app').factory('wonkaFactory', [function(){
		
		var books = [array]
		return{
			bookList : books,
			otherProp: 'otherprob',

			//factories don't have scope.
			// variables can be declared but do not need $scope. 
			// fa

		}
	}])

	//INJECT in control - as dependency as string 'wonkaFactory', include in function for controller.

	// set shared factories to variables

	ex. $scope.books = wonkaFactory.bookList


	side not - '$timeout' - needds to be injected into function

	$timeout(function(){

	}, #milliseconds)

	If an item modifies a factory in any control, it will reflect across all controllers.


	ngRepeats - can pass filters!  ex ng-repeat = "book in books | orderBy: 'author;"











